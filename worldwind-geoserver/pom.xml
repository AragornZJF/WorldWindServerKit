<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>gov.nasa.worldwind.server</groupId>
        <artifactId>worldwind-serverkit</artifactId>
        <version>0.5.0-SNAPSHOT</version>
    </parent>    
    <artifactId>worldwind-geoserver</artifactId>
    <packaging>war</packaging>

    <!--=====================================================================-->
    <!--Project Information                                                  -->
    <!--=====================================================================-->    
    <name>WorldWind GeoServer Application</name>
    <description>The GeoServer map server application from the WorldWind Server Kit.</description>
    <url>https://github.com/NASAWorldWind/WorldWindServerKit</url>
    <organization>
        <name>NASA World Wind</name>
        <url>https://worldwind.arc.nasa.gov</url>
    </organization>
    <licenses>
        <license>
            <name>General Public License (GPL)</name>
            <url>http://www.gnu.org/copyleft/gpl.txt</url>
        </license>
    </licenses>
    <developers />
    <contributors />
    <mailingLists />
    <prerequisites />    
    
    <!--=====================================================================-->
    <!--Environment Settings                                                 -->
    <!--=====================================================================-->    
    <scm>
        <url>https://github.com/NASAWorldWind/WorldWindServerKit</url>
        <connection>scm:git:git://github.com/NASAWorldWind/WorldWindServerKit.git</connection>
        <developerConnection>scm:git:https://github.com/NASAWorldWind/WorldWindServerKit.git</developerConnection>
        <tag>HEAD</tag>
    </scm>    
    <issueManagement>
        <system>GitHub Issues</system>
        <url>https://github.com/NASAWorldWind/WorldWindServerKit/issues</url>
    </issueManagement>
    <ciManagement>
        <system>Travis CI</system>
        <url>https://travis-ci.org/NASAWorldWind/WorldWindServerKit</url>
    </ciManagement>
    <distributionManagement />    
    
    <!--=====================================================================-->
    <!--The Basics                                                           -->
    <!--=====================================================================-->
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <!--Configuration for Jetty-->
        <webappSourceDirectory>${project.basedir}/src/main/webapp</webappSourceDirectory>
        <sde.version>9.3</sde.version>
        <jetty.port>8080</jetty.port>
        <stop.jetty.port>8079</stop.jetty.port>
        <jetty.run.daemon>false</jetty.run.daemon>       
        
        <webapp.protocol>http</webapp.protocol>
        <webapp.host>cobra</webapp.host>
        <webapp.uris>${project.basedir}/src/test/uris/uris.txt</webapp.uris>
        <!-- dataConfigId : typically "minimal"
        dataConfigId defines the data folder template. It should match a subfolder
        under the parent folder's data folder.  Its contents will be copied into
        the war file. 
        -->
        <baseConfigId>base</baseConfigId>
        <dataConfigId>nasa</dataConfigId>
        <configDirectory>${project.basedir}/../data_config</configDirectory>
    </properties>    
    
    <dependencies>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-wms</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-gwc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-wfs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-wcs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-demo</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-sec-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-sec-ldap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.web</groupId>
            <artifactId>gs-web-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-platform</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-main</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-wcs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-wcs1_0</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-wcs1_1</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-wcs2_0</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-wfs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-kml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-gwc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-restconfig</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.security</groupId>
            <artifactId>gs-sec-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.security</groupId>
            <artifactId>gs-sec-ldap</artifactId>
        </dependency>
        
        <!--Web Processing Service extension-->
        <dependency>
            <groupId>org.geoserver.extension</groupId>
            <artifactId>gs-wps-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geoserver.extension</groupId>
            <artifactId>gs-web-wps</artifactId>
            <version>${gs.version}</version>
        </dependency>

        <!--WorldWind GeoServer Viewer module-->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>worldwind-gs-explorer</artifactId>
            <version>${project.version}</version>
        </dependency>
        
        <!--WorldWind GeoServer Core UI module-->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>worldwind-gs-web</artifactId>
            <version>${project.version}</version>
        </dependency>
        
        <!--WorldWind GeoServer WMS module-->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>worldwind-gs-wms</artifactId>
            <version>${project.version}</version>
        </dependency>
        
        <!--WorldWind GeoServer GeoPackage extension -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>worldwind-gs-geopkg</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!--WorldWind GeoTools GeoPackage module-->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>worldwind-gt-geopkg</artifactId>
            <version>${project.version}</version>
        </dependency>


        <!-- GeoTools -->
        <dependency>
            <groupId>org.geotools.jdbc</groupId>
            <artifactId>gt-jdbc-postgis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-wfs-ng</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-geotiff</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-arcgrid</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-image</artifactId>
        </dependency>
        
        <!--imagemosaic datasource module-->
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-imagemosaic</artifactId>
        </dependency>
        
        <!--JP2K based grid coverage readers-->   
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-jp2k</artifactId>
        </dependency>
        
        <!--imagepyramid datasource module-->
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-imagepyramid</artifactId>
        </dependency>    
        <!--WPS--> 
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-process-geometry</artifactId>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-jndi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-plus</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.geoserver</groupId>
            <artifactId>gs-main</artifactId>
            <classifier>tests</classifier>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>xmlunit</groupId>
            <artifactId>xmlunit</artifactId>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
        </dependency>
    </dependencies>
    
    <!--=====================================================================-->
    <!--Build Settings                                                       -->
    <!--=====================================================================-->    
    <build>
        <plugins>
            <!--
            Run a set of ant tasks from a phase of the build.
            -->         
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>                    
                    <!-- Builds a valid "data" directory into the web app -->
                    <!-- In a Linux/Tomcat war file, the default embedded GeoServer 
                    data directory location is "<web application root>/data" -->
                    <execution>
                        <id>configPackage</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <!-- copy the base distribution files from the config dir to the webapp dir -->
                                <echo message="Copying data dir from ${configDirectory}/${baseConfigId}" />
                                <copy todir="${webappSourceDirectory}/data">
                                    <fileset dir="${configDirectory}/${baseConfigId}" includes="**/**" />
                                </copy>
                                
                                <!-- check if the data config is available, if not fail -->
                                <available file="${configDirectory}/${dataConfigId}" property="configIsAvailable" />
                                <fail message="Unable to locate configuration: ${configDirectory}/${dataConfigId}" unless="configIsAvailable" />
                                
                                <!-- copy the data files from the config dir to the webapp dir -->
                                <echo message="Copying data dir from ${configDirectory}/${dataConfigId}" />
                                <copy todir="${webappSourceDirectory}/data">
                                    <fileset dir="${configDirectory}/${dataConfigId}" includes="**/**" />
                                </copy>
                            </tasks>
                        </configuration>
                    </execution>
                    <execution>
                        <id>configClean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <delete dir="${webappSourceDirectory}/data" />
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--plugin>
              <groupId>org.geoserver.maven</groupId>
              <artifactId>gs-config</artifactId>
              <version>${project.version}</version>
              <executions>
                <execution>
                  <id>configPackage</id>
                  <configuration>
                    <configDirectory>${configDirectory}</configDirectory>
                    <dataConfigId>${dataConfigId}</dataConfigId>
                  </configuration>
                  <phase>package</phase>
                  <goals>
                    <goal>config</goal>
                  </goals>
                </execution>
                <execution>
                  <id>configClean</id>
                  <phase>clean</phase>
                  <goals>
                    <goal>clean</goal>
                  </goals>
                </execution>
              </executions>
            </plugin-->

            <!--            
            The WAR Plugin is responsible for collecting all artifact dependencies, 
            classes and resources of the web application and packaging them into 
            a web application archive.
            -->
            <plugin>
                <inherited>true</inherited>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <warName>geoserver</warName>
                    <webappDirectory>${project.build.directory}/worldwind-geoserver</webappDirectory>
                    <packagingExcludes>WEB-INF/lib/javax.servlet-api*.jar</packagingExcludes>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <manifestEntries>
                            <GeoServerModule>core</GeoServerModule>
                            <Application-Name>${project.build.finalname}</Application-Name>
                            <Project-Version>${project.version}</Project-Version>
                            <Iteration-Name>${iteration}</Iteration-Name>
                            <Build-Timestamp>${maven.build.timestamp}</Build-Timestamp>
                            <Git-Revision>${build.commit.id}</Git-Revision>
                        </manifestEntries>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>war</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--Allocate random unassigned ports to be used during build process (for integration tests)-->
            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>port-allocator-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>allocate-ports</goal>
                        </goals>
                        <configuration>
                            <ports>
                                <port>
                                    <name>jetty.port</name>
                                </port>
                                <port>
                                    <name>stop.jetty.port</name>
                                </port>
                            </ports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>                        
            <!--
            The Jetty Maven plugin is useful for rapid development and testing.
            To start Jetty and serve up your project execute: 
                mvn jetty:run
            Then point your browser to on http://localhost:8080/geoserver/web/
            --> 
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <!-- 
                These configuration elements set up the Jetty environment in which your webapp executes.
                See: http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html
                -->
                <configuration>
                    <webApp>
                        <contextPath>/geoserver</contextPath>
                    </webApp>
                    <connectors>
                        <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                            <port>${jetty.port}</port>
                            <maxIdleTime>10000</maxIdleTime>
                        </connector>
                    </connectors>
                    <!--A port number for Jetty to listen on to receive a stop command to cause it to shutdown-->
                    <stopPort>${stop.jetty.port}</stopPort>
                    <!--A string value sent to the stopPort to validate the stop command-->
                    <stopKey>geoserver</stopKey>
                    <!--The maximum time in seconds that the plugin will wait for confirmation that Jetty has stopped--> 
                    <stopWait>10</stopWait>
                    <!--If daemon is true, the plugin should continue and not block-->
                    <daemon>false</daemon>
                    <!-- Set the GEOSERVER_DATA_DIR for the Jetty run -->
                    <systemProperties> 
                        <systemProperty> 
                            <name>GEOSERVER_DATA_DIR</name>
                            <value>${project.build.directory}/worldwind-geoserver/data</value> 
                        </systemProperty> 
                    </systemProperties>
                    <!-- Make sure it's not looking for annotations everywhere -->
                    <contextXml>${project.build.testOutputDirectory}/jetty-context.xml</contextXml>
                </configuration>
                <executions>
                    <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <!--<goal>deploy-war</goal>-->
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>                
            </plugin>

            <!--
            Run the JMeter integration tests on the Jetty server.
            See: http://jmeter.lazerycode.com/
            See: https://github.com/jmeter-maven-plugin
            -->
            <plugin>
                <artifactId>jmeter-maven-plugin</artifactId>
                <groupId>com.lazerycode.jmeter</groupId>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>jmeter</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--Creates the user.properties file-->
                    <propertiesUser>
                        <!--A user which accesses all URLs-->
                        <threadgroup00.name>test</threadgroup00.name>
                        <!--number of threads to use-->
                        <threadgroup00.numberOfThreads>10</threadgroup00.numberOfThreads>
                        <!--delay of the test in seconds-->
                        <threadgroup00.scheduledDelay>0</threadgroup00.scheduledDelay>
                        <!--duration of the test in seconds-->
                        <threadgroup00.scheduledDuration>30</threadgroup00.scheduledDuration>
                        <!--how long till all threads are up and running in seconds-->
                        <threadgroup00.rampUp>1</threadgroup00.rampUp>
                        <!--target throughput of all threads of the group per minute-->
                        <threadgroup00.throughput>100000000</threadgroup00.throughput>
                        <!-- use uris from given file -->
                        <threadgroup00.dataFile>${webapp.uris}</threadgroup00.dataFile>
                        <protocol>${webapp.protocol}</protocol>
                        <server>${webapp.host}</server>
                        <port>${jetty.port}</port>
                    </propertiesUser>
                    <!--Sets whether build should fail if there are failed requests found in the JMeter result file-->
                    <ignoreResultFailures>true</ignoreResultFailures>
                    <!--Overrides all log levels used by JMeter. Valid log levels are: ERROR, WARN, INFO, DEBUG (They are not case sensitive);-->
                    <overrideRootLogLevel>info</overrideRootLogLevel>
                </configuration>
            </plugin>             

            <!--
            Generate reports and charts from the JMeter output.
            See https://github.com/afranken/jmeter-analysis-maven-plugin
            -->
            <plugin>
                <groupId>com.lazerycode.jmeter</groupId>
                <artifactId>jmeter-analysis-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>analyze</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--
                    source file that contains jmeter result data. Needs to be XML format or a GZIPed XML format
                    -->
                    <source>${project.build.directory}/jmeter/results/*</source>

                    <!--
                    directory where to store analysis report files. At least a file "summary.txt" will be stored here.
                    -->
                    <targetDirectory>${project.build.directory}/reports</targetDirectory>
                    
                    <!--
                    Defines groups of requests by URL patterns,
                    e.g. URIs starting with /mock/page are associated with group "pages". All analysis results are
                    If there is no such mapping then the threadgroups from the jmeter.xml are used.
                    -->
                    <!--<requestGroups>-->
                    <!--<test>/en-US/firefox/**</test>-->
                    <!--</requestGroups>-->

                    <!--
                    Mapping from resource URL to file name. Every resource will be downloaded and stored in 'targetDirectory'
                    with the given filename. Tokens "_FROM_" and "_TO_" can be used as placeholders. These placeholders will
                    be replaced by timestamps of execution interval (formatted as ISO8601, e.g. '20111216T145509+0100').
                    -->
                    <!--<remoteResources>-->
                    <!--<property>-->
                    <!--<name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name>-->
                    <!--<value>my_resource.txt</value>-->
                    <!--</property>-->
                    <!--</remoteResources>-->
                </configuration>
            </plugin>                                                                        
        </plugins>
    </build>
</project>